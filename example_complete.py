#!/usr/bin/env python3
"""
Complete Example of the Multi-Library Autotune System
====================================================

This example demonstrates how to use the multi-library autotune system
with all its advanced features.

Execute: python multi_autotune_example.py
"""

import os
import sys
import time
import json
from pathlib import Path
import numpy as np

# Add system directory to path
sys.path.insert(0, str(Path(__file__).parent))

# Import multi-library system
try:
    from multi_autotune import (
        multi_library_autotune, 
        MultiLibraryAutotuneProcessor,
        AutotuneConfig,
        validate_system_setup,
        VALID_METHODS
    )
    print("‚úÖ Multi-library system imported successfully")
except ImportError as e:
    print(f"‚ùå Error importing system: {e}")
    print("üí° Make sure all files are in the same directory")
    sys.exit(1)

def create_demo_files():
    """Create demo files."""
    print("üìÅ Creating demo files...")
    
    try:
        import soundfile as sf
        import pretty_midi
        
        # Create test audio with detuning
        sr = 44100
        duration = 3.0
        t = np.linspace(0, duration, int(sr * duration))
        
        # Sequence of detuned notes
        notes_freqs = [
            (440 * 1.03, 0, 0.8),      # A4 +50 cents
            (493.88 * 0.97, 0.8, 1.6), # B4 -50 cents  
            (523.25 * 1.05, 1.6, 2.4), # C5 +85 cents
            (440 * 0.95, 2.4, 3.0)     # A4 -85 cents
        ]
        
        audio = np.zeros(len(t))
        for freq, start_time, end_time in notes_freqs:
            start_idx = int(start_time * sr)
            end_idx = int(end_time * sr)
            segment_t = t[start_idx:end_idx] - t[start_idx]
            
            # Tone with harmonics and envelope
            tone = (0.6 * np.sin(2 * np.pi * freq * segment_t) +
                   0.3 * np.sin(2 * np.pi * freq * 2 * segment_t) +
                   0.1 * np.sin(2 * np.pi * freq * 3 * segment_t))
            
            # ADSR envelope
            envelope = np.ones_like(tone)
            fade_samples = min(1000, len(tone) // 10)
            if fade_samples > 0:
                envelope[:fade_samples] = np.linspace(0, 1, fade_samples)
                envelope[-fade_samples:] = np.linspace(1, 0, fade_samples)
            
            tone *= envelope
            audio[start_idx:end_idx] = tone
        
        # Add subtle noise
        noise = np.random.normal(0, 0.02, len(audio))
        audio += noise
        
        # Save audio
        sf.write("demo_detuned_vocal.wav", audio, sr)
        print("   ‚úÖ demo_detuned_vocal.wav created")
        
        # Create corresponding MIDI (in tune)
        midi_obj = pretty_midi.PrettyMIDI()
        instrument = pretty_midi.Instrument(program=0)  # Piano
        
        midi_notes = [
            (69, 0.0, 0.8),   # A4
            (71, 0.8, 1.6),   # B4
            (72, 1.6, 2.4),   # C5
            (69, 2.4, 3.0)    # A4
        ]
        
        for pitch, start_time, end_time in midi_notes:
            note = pretty_midi.Note(
                velocity=80,
                pitch=pitch,
                start=start_time,
                end=end_time
            )
            instrument.notes.append(note)
        
        midi_obj.instruments.append(instrument)
        midi_obj.write("demo_perfect_melody.mid")
        print("   ‚úÖ demo_perfect_melody.mid created")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Error: {e}")
        print("   üí° Run: pip install soundfile pretty_midi")
        return False
    except Exception as e:
        print(f"   ‚ùå Error creating files: {e}")
        return False

def demonstrate_system_validation():
    """Demonstrate system validation."""
    print("\nüîç SYSTEM VALIDATION")
    print("=" * 50)
    
    validation = validate_system_setup()
    
    print(f"Overall status: {'‚úÖ OK' if validation['overall_status'] else '‚ùå PROBLEMS'}")
    print(f"Available methods: {len(validation['available_methods'])}")
    
    if validation['available_methods']:
        print("\nFunctional methods:")
        for method in validation['available_methods']:
            print(f"  ‚Ä¢ {method['name']:25} Q:{method['quality_score']:.1f} S:{method['speed_score']:.1f}")
    
    if validation['missing_dependencies']:
        print(f"\nMissing dependencies:")
        for dep in validation['missing_dependencies']:
            print(f"  ‚Ä¢ {dep['name']}: {dep['installation_notes']}")
    
    return validation['overall_status']

def demonstrate_basic_usage():
    """Demonstrate basic system usage."""
    print("\nüéµ BASIC USAGE DEMONSTRATION")
    print("=" * 50)
    
    try:
        # Simplest usage - automatic selection
        print("1. Automatic method selection...")
        
        result = multi_library_autotune(
            audio_path="demo_detuned_vocal.wav",
            midi_path="demo_perfect_melody.mid",
            force=0.8,
            pitch_shift_method="auto"
        )
        
        if result.success:
            print(f"   ‚úÖ Success with {result.method_used}")
            print(f"   ‚è±Ô∏è  Time: {result.processing_time:.2f}s")
            if 'snr' in result.quality_metrics:
                print(f"   üìä SNR: {result.quality_metrics['snr']:.1f} dB")
        else:
            print(f"   ‚ùå Failed: {result.error_message}")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False

def demonstrate_method_comparison():
    """Demonstrate method comparison."""
    print("\n‚öñÔ∏è  METHOD COMPARISON")
    print("=" * 50)
    
    # Detect available methods
    processor = MultiLibraryAutotuneProcessor()
    available_methods = processor.get_available_methods()
    
    if not available_methods:
        print("‚ùå No methods available for comparison")
        return False
    
    print(f"Testing {len(available_methods)} available methods...")
    
    results = {}
    
    # Test each available method
    for method in available_methods[:3]:  # Limit to 3 methods for the example
        print(f"\nüîÑ Testing {method}...")
        
        try:
            start_time = time.time()
            
            result = multi_library_autotune(
                audio_path="demo_detuned_vocal.wav",
                midi_path="demo_perfect_melody.mid",
                force=0.8,
                pitch_shift_method=method
            )
            
            processing_time = time.time() - start_time
            
            if result.success:
                results[method] = {
                    'success': True,
                    'time': processing_time,
                    'snr': result.quality_metrics.get('snr', 0),
                    'output': result.output_path
                }
                print(f"   ‚úÖ Success in {processing_time:.2f}s")
                
            else:
                results[method] = {
                    'success': False,
                    'error': result.error_message
                }
                print(f"   ‚ùå Failed: {result.error_message}")
                
        except Exception as e:
            results[method] = {
                'success': False,
                'error': str(e)
            }
            print(f"   ‚ùå Error: {e}")
    
    # Comparative report
    print(f"\nüìä COMPARATIVE REPORT")
    print("-" * 30)
    
    successful = [(method, data) for method, data in results.items() if data['success']]
    
    if successful:
        # Sort by speed
        successful.sort(key=lambda x: x[1]['time'])
        
        print("üèÉ Speed ranking:")
        for i, (method, data) in enumerate(successful, 1):
            print(f"{i}. {method:20} {data['time']:.2f}s  SNR:{data['snr']:.1f}dB")
        
        # Sort by quality
        successful.sort(key=lambda x: x[1]['snr'], reverse=True)
        
        print("\nüéµ Quality ranking (SNR):")
        for i, (method, data) in enumerate(successful, 1):
            print(f"{i}. {method:20} SNR:{data['snr']:5.1f}dB  {data['time']:.2f}s")
    
    failed = [(method, data) for method, data in results.items() if not data['success']]
    if failed:
        print(f"\n‚ùå Methods that failed:")
        for method, data in failed:
            print(f"  ‚Ä¢ {method}: {data['error']}")
    
    return len(successful) > 0

def demonstrate_profiles():
    """Demonstrate use of predefined profiles."""
    print("\nüìã PROFILE DEMONSTRATION")
    print("=" * 50)
    
    profiles_to_test = ["realtime", "production", "research"]
    
    for profile in profiles_to_test:
        print(f"\nüîß Testing profile '{profile}'...")
        
        try:
            result = multi_library_autotune(
                audio_path="demo_detuned_vocal.wav",
                midi_path="demo_perfect_melody.mid",
                force=0.8,
                profile=profile
            )
            
            if result.success:
                print(f"   ‚úÖ {profile}: {result.method_used} em {result.processing_time:.2f}s")
            else:
                print(f"   ‚ùå {profile}: {result.error_message}")
                
        except Exception as e:
            print(f"   ‚ùå {profile}: {e}")

def demonstrate_fallback_system():
    """Demonstrate fallback system."""
    print("\nüîÑ FALLBACK SYSTEM DEMONSTRATION")
    print("=" * 50)
    
    # Test with method that may not be available
    print("Testing fallback with unavailable method...")
    
    try:
        # Tenta m√©todo que pode n√£o existir
        result = multi_library_autotune(
            audio_path="demo_detuned_vocal.wav",
            midi_path="demo_perfect_melody.mid",
            force=0.8,
            pitch_shift_method="method_that_doesnt_exist"
        )
        
        if result.success:
            print(f"   ‚úÖ Fallback worked: {result.method_used}")
            if result.fallback_methods_tried:
                print(f"   üîÑ Methods tried: {', '.join(result.fallback_methods_tried)}")
        else:
            print(f"   ‚ùå Fallback failed: {result.error_message}")
            
    except Exception as e:
        print(f"   ‚ùå Error in fallback test: {e}")

def demonstrate_configuration():
    """Demonstrate custom configuration."""
    print("\n‚öôÔ∏è  CUSTOM CONFIGURATION DEMONSTRATION")
    print("=" * 50)
    
    # Custom configuration
    custom_config = AutotuneConfig(
        quality_priority=0.9,  # Prioritize quality
        enable_preprocessing=True,
        enable_postprocessing=True,
        fallback_enabled=True,
        quality_threshold=0.85
    )
    
    print("Testing with custom configuration...")
    
    try:
        result = multi_library_autotune(
            audio_path="demo_detuned_vocal.wav",
            midi_path="demo_perfect_melody.mid",
            force=0.9,
            pitch_shift_method="auto",
            config=custom_config
        )
        
        if result.success:
            print(f"   ‚úÖ Configura√ß√£o personalizada: {result.method_used}")
            print(f"   ‚è±Ô∏è  Tempo: {result.processing_time:.2f}s")
            print(f"   üìä Qualidade: {result.quality_metrics.get('snr', 0):.1f} dB")
        else:
            print(f"   ‚ùå Falhou: {result.error_message}")
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

def demonstrate_benchmarking():
    """Demonstrate benchmarking system."""
    print("\nüèÉ BENCHMARKING DEMONSTRATION")
    print("=" * 50)
    
    print("Running automatic benchmark...")
    
    try:
        result = multi_library_autotune(
            audio_path="demo_detuned_vocal.wav",
            midi_path="demo_perfect_melody.mid",
            force=0.8,
            enable_benchmarking=True
        )
        
        if result.success and 'benchmark_results' in result.quality_metrics:
            benchmark_data = result.quality_metrics['benchmark_results']
            
            print(f"\nüìä Benchmark results:")
            print("-" * 40)
            
            # Sort results by score
            sorted_results = []
            for method, data in benchmark_data.items():
                if data['success']:
                    score = data.get('method_info', 0)
                    time_ms = data['processing_time'] * 1000
                    snr = data['quality_metrics'].get('snr', 0)
                    sorted_results.append((score, method, time_ms, snr))
            
            sorted_results.sort(reverse=True)
            
            for i, (score, method, time_ms, snr) in enumerate(sorted_results, 1):
                print(f"{i}. {method:20} Score:{score:.2f} {time_ms:6.1f}ms SNR:{snr:5.1f}dB")
            
            # Save report
            with open("benchmark_report.json", "w") as f:
                json.dump(benchmark_data, f, indent=2, default=str)
            print(f"\nüíæ Detailed report saved to: benchmark_report.json")
            
        else:
            print("‚ùå Benchmark n√£o executado ou falhou")
            
    except Exception as e:
        print(f"‚ùå Erro no benchmark: {e}")

def demonstrate_advanced_features():
    """Demonstra funcionalidades avan√ßadas."""
    print("\nüöÄ FUNCIONALIDADES AVAN√áADAS")
    print("=" * 50)
    
    # 1. Processamento com m√∫ltiplos m√©todos de fallback
    print("1. Fallback chain personalizada...")
    
    try:
        result = multi_library_autotune(
            audio_path="demo_detuned_vocal.wav",
            midi_path="demo_perfect_melody.mid",
            force=0.8,
            pitch_shift_method=["librosa_hifi", "librosa_standard", "scipy_manual"]
        )
        
        if result.success:
            print(f"   ‚úÖ Chain executada: {result.method_used}")
        else:
            print(f"   ‚ùå Chain falhou: {result.error_message}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
            # 2. Detailed analysis of audio characteristics
        print("\n2. Audio characteristics analysis...")
    
    try:
        from multi_autotune import AudioCharacteristics
        import librosa
        
        audio, sr = librosa.load("demo_detuned_vocal.wav", sr=44100)
        characteristics = AudioCharacteristics.analyze_audio(audio, sr)
        
        print(f"   üìä Duration: {characteristics.duration:.2f}s")
        print(f"   üìà Complexity: {characteristics.complexity_score:.3f}")
        print(f"   üîä Noise level: {characteristics.noise_level:.3f}")
        print(f"   üìê Dynamic range: {characteristics.dynamic_range:.1f} dB")
        print(f"   üéº Harmonic content: {characteristics.harmonic_content:.3f}")
        
    except Exception as e:
        print(f"   ‚ùå Analysis error: {e}")

def cleanup_demo_files():
    """Remove demonstration files."""
    demo_files = [
        "demo_detuned_vocal.wav",
        "demo_perfect_melody.mid",
        "benchmark_report.json"
    ]
    
    # Also remove generated output files
    import glob
    output_files = glob.glob("*_autotuned*.wav")
    demo_files.extend(output_files)
    
    print(f"\nüßπ Cleaning up {len(demo_files)} demonstration files...")
    
    removed_count = 0
    for file in demo_files:
        try:
            if os.path.exists(file):
                os.remove(file)
                removed_count += 1
        except Exception:
            pass
    
    print(f"   ‚úÖ {removed_count} files removed")

def print_usage_guide():
    """Print usage guide."""
    print("\nüìñ SYSTEM USAGE GUIDE")
    print("=" * 50)
    
    print("""
üéØ BASIC USAGE:
  from multi_autotune import multi_library_autotune
  
  result = multi_library_autotune(
      audio_path="vocal.wav",
      midi_path="melody.mid",
      force=0.85
  )

üîß METHOD SELECTION:
  # Automatic (recommended)
  method="auto"
  
  # Specific method
  method="librosa_hifi"
  
  # Fallback chain
  method=["pyrubberband_shift", "librosa_hifi", "librosa_standard"]

üìã PREDEFINED PROFILES:
  profile="production"    # High quality
  profile="realtime"      # Maximum speed
  profile="broadcast"     # Broadcast quality
  profile="research"      # For analysis
  profile="creative"      # Creative effects

‚öôÔ∏è  CUSTOM CONFIGURATION:
  config = AutotuneConfig(
      quality_priority=0.9,
      enable_preprocessing=True,
      fallback_enabled=True
  )

üèÉ BENCHMARKING:
  result = multi_library_autotune(
      audio_path="vocal.wav",
      midi_path="melody.mid",
      enable_benchmarking=True
  )

üíª COMMAND LINE:
  python multi_autotune_cli.py vocal.wav melody.mid
  python multi_autotune_cli.py --list-methods
  python multi_autotune_cli.py --validate-setup
  python multi_autotune_cli.py vocal.wav melody.mid --benchmark
    """)

def main():
    """Main example function."""
    print("üéµ" + "=" * 68 + "üéµ")
    print("üéµ COMPLETE DEMONSTRATION OF THE MULTI-LIBRARY AUTOTUNE SYSTEM üéµ")
    print("üéµ" + "=" * 68 + "üéµ")
    
    print("\nThis example demonstrates all system features:")
    print("‚Ä¢ Intelligent automatic method selection")
    print("‚Ä¢ Comparison between different libraries")
    print("‚Ä¢ Robust fallback system")
    print("‚Ä¢ Predefined profiles for different use cases")
    print("‚Ä¢ Advanced custom configuration")
    print("‚Ä¢ Automatic benchmarking and performance analysis")
    
    try:
        # 1. Valida√ß√£o do sistema
        if not demonstrate_system_validation():
            print("‚ùå Sistema n√£o est√° configurado adequadamente!")
            print("üí° Execute: python multi_autotune_cli.py --check-dependencies")
            return 1
        
        # 2. Cria√ß√£o de arquivos de demonstra√ß√£o
        if not create_demo_files():
            print("‚ùå Could not create demonstration files!")
            return 1
        
        # 3. Demonstra√ß√µes principais
        demonstrations = [
            ("Uso B√°sico", demonstrate_basic_usage),
            ("Compara√ß√£o de M√©todos", demonstrate_method_comparison),
            ("Perfis Predefinidos", demonstrate_profiles),
            ("Sistema de Fallback", demonstrate_fallback_system),
            ("Configura√ß√£o Personalizada", demonstrate_configuration),
            ("Benchmarking", demonstrate_benchmarking),
            ("Funcionalidades Avan√ßadas", demonstrate_advanced_features)
        ]
        
        success_count = 0
        
        for demo_name, demo_func in demonstrations:
            try:
                print(f"\n{'='*20} {demo_name} {'='*20}")
                if demo_func():
                    success_count += 1
                    print(f"‚úÖ {demo_name} conclu√≠do com sucesso")
                else:
                    print(f"‚ö†Ô∏è  {demo_name} teve problemas")
            except Exception as e:
                print(f"‚ùå Erro em {demo_name}: {e}")
        
        # 4. Relat√≥rio final
        print(f"\n{'='*70}")
        print("üìä RELAT√ìRIO FINAL DA DEMONSTRA√á√ÉO")
        print(f"{'='*70}")
        
        print(f"Demonstra√ß√µes executadas: {len(demonstrations)}")
        print(f"Sucessos: {success_count}")
        print(f"Taxa de sucesso: {success_count/len(demonstrations)*100:.1f}%")
        
        if success_count == len(demonstrations):
            print("\nüéâ TODAS AS DEMONSTRA√á√ïES CONCLU√çDAS COM SUCESSO! üéâ")
            print("\nüöÄ O sistema est√° funcionando perfeitamente!")
        elif success_count >= len(demonstrations) * 0.7:
            print("\n‚úÖ Sistema funcionando adequadamente")
            print("‚ö†Ô∏è  Algumas funcionalidades podem ter limita√ß√µes")
        else:
            print("\n‚ö†Ô∏è  Sistema com problemas significativos")
            print("üîß Verifique as depend√™ncias e configura√ß√£o")
        
        # 5. Guia de uso
        print_usage_guide()
        
        # 6. Limpeza (opcional)
        try:
            response = input("\n‚ùì Remover arquivos de demonstra√ß√£o? (s/N): ").lower()
            if response in ['s', 'sim', 'y', 'yes']:
                cleanup_demo_files()
            else:
                print("üìÅ Arquivos de demonstra√ß√£o mantidos")
        except (EOFError, KeyboardInterrupt):
            print("\nüìÅ Arquivos de demonstra√ß√£o mantidos")
        
        print(f"\nüéØ PR√ìXIMOS PASSOS:")
        print(f"1. Use python multi_autotune_cli.py --help para ver todas as op√ß√µes")
        print(f"2. Test with your own audio and MIDI files")
        print(f"3. Experimente diferentes m√©todos e perfis")
        print(f"4. Execute benchmarks para otimizar sua configura√ß√£o")
        
        return 0 if success_count >= len(demonstrations) * 0.7 else 1
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Demonstra√ß√£o cancelada pelo usu√°rio")
        return 130
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())